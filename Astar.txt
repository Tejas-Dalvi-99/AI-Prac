import heapq

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v, weight):
        if u not in self.graph:
            self.graph[u] = []
        self.graph[u].append((v, weight))

    def a_star(self, start, goal, heuristic):
        open_set = [(heuristic[start], 0, start, [])]  # (f(n) = g(n) + h(n), g(n), node, path)
        closed_set = set()

        while open_set:
            _, cost, current, path = heapq.heappop(open_set)

            if current == goal:
                print(f"Shortest Path: {path + [current]}")
                print(f"Total Cost: {cost}")
                return

            if current in closed_set:
                continue

            closed_set.add(current)

            for neighbor, weight in self.graph.get(current, []):
                if neighbor not in closed_set:
                    g_score = cost + weight
                    f_score = g_score + heuristic[neighbor]
                    heapq.heappush(open_set, (f_score, g_score, neighbor, path + [current]))

        print("\nGoal not reached.")

# Example usage:
if __name__ == "__main__":
    g = Graph()

    # Adding edges to the graph with weights
    g.add_edge('A', 'B', 4)
    g.add_edge('A', 'C', 2)
    g.add_edge('B', 'D', 5)
    g.add_edge('B', 'E', 10)
    g.add_edge('C', 'F', 8)
    g.add_edge('D', 'G', 7)
    g.add_edge('E', 'H', 3)
    g.add_edge('F', 'I', 1)
    g.add_edge('G', 'J', 6)
    g.add_edge('H', 'K', 9)
    g.add_edge('I', 'L', 4)

    # Heuristic function (for example, straight-line distance to the goal)
    heuristic = {'A': 7, 'B': 6, 'C': 4, 'D': 2, 'E': 4, 'F': 4, 'G': 5, 'H': 2, 'I': 1, 'J': 0, 'K': 3, 'L': 0}

    print("A* Search:")
    g.a_star('A', 'L', heuristic)
