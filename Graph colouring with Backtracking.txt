def is_safe(vertex, graph, color, c):
    for neighbor in graph[vertex]:
        if color[neighbor] == c:
            return False
    return True

def map_coloring_util(graph, m, color, vertex):
    if vertex == len(graph):
        return True

    for c in range(1, m+1):
        if is_safe(vertex, graph, color, c):
            color[vertex] = c

            if map_coloring_util(graph, m, color, vertex + 1):
                return True

            color[vertex] = 0  # Backtrack

    return False

def map_coloring(graph, m):
    color = [0] * len(graph)

    if not map_coloring_util(graph, m, color, 0):
        print("Solution does not exist.")
        return

    print("Map Coloring Solution:")
    for i in range(len(graph)):
        print(f"Region {i+1}: Color {color[i]}")

# Example usage:
if __name__ == "__main__":
    # Example graph representing the connections between regions
    # Each sublist represents the neighbors of a region
    graph = {
        0: [1, 2, 3],
        1: [0, 2],
        2: [0, 1, 3],
        3: [0, 2]
    }

    num_colors = 3  # Number of colors to use

    map_coloring(graph, num_colors)
